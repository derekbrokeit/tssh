#!/bin/bash
# Copyright 2012 Derek Ashley Thomas

# this establishes a connection to a remote server
# if necessary it automatically handles port forwarding from a central server

# there are 2 input variables:
# $1 is the title of the server in the serverconn file
# $2 is a message (or code to be run) sent to the server [optional]
#    if port forwarding occurs AND no message is given, then $auto_msg is supplied
if [[ -f $HOME/.path ]] ; then
    LANG=en_US.UTF-8
    . $HOME/.path
fi
if [[ -f $HOME/.profile ]] ; then
    . $HOME/.profile
fi

# message given if none is specified (for non-port forwarded dest)
# message given if none is specified (for port forwarded dest)
# auto_msg_port='source $HOME/.path  ; tmx -d'
#auto_msg_port='source $HOME/.path  ; LANG='"$LANG"' exec tmx -d'
SERVE=$HOME/.SERV

if [[ "$1" == -P ]] ; then
    # proxy to the central server
    # this connects a SOCKSv5 proxy connection to the given port
    # for now, this is only valid for the central server

    # get the central computer
    regex="^.+\*\|"
    name=$(egrep "$regex" $SERV | awk -F'|' '{print $1}')
    ip=$(egrep "$regex" $SERV | awk -F'|' '{print $2}')
    if [[ "x$2" == "x" ]] ; then
        port=1080
    else
        port=$2
    fi

    # setup the command and make sure it's not already running
    command="ssh -D $port $ip"
    test=$(ps -e | egrep "$command" 2> /dev/null | awk '{print $1}')
    if [[ $(echo $test | wc -w) -eq 1 ]] ; then
        echo "$(basename $0): Proxy to $name > port $port"
        $command
    else
        echo "$(basename $0): Closing the Proxy connection"
        kill $(echo $test | awk '{print $1}')
    fi
    exit
else
    # find the destination
    search="$(tssh-search $1)"
    if [[ $? -gt 0 ]] ; then
        echo "$search"
        exit
    fi
fi
name=$(egrep "$search" $SERV | awk -F'|' '{print $1}')
ip=$(egrep "$search" $SERV | awk -F'|' '{print $2}')
user=$(egrep "$search" $SERV | awk -F'|' '{print $3}')
port=$(egrep "$search" $SERV | awk -F'|' '{print $4}')
auto_msg=$(egrep "$search" $SERV | awk -F'|' '{print $5}')

# prepare the message for the server
unset message
shift 1
if [[ $# -gt 0 ]] ; then
    message="$@"
fi

echo    "$(basename $0): ${name}"
if [[ "x$message" != "x" ]] ; then
    echo "  message: $message"
fi

cmd="ssh -q -X -C -c blowfish-cbc,arcfour "
#if [[ ${HOSTNAME} == momo* ]] ; then
if [[ ! -n $port && -n $ip ]] ; then
    # this connects to any server without port forwarding
    if [[ ! -n $message ]] ; then
        message=$auto_msg
    fi
    #ssh -q -Y -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $ip -t $message
    $cmd ${user}@$ip -t $message
elif [[ -n $ip  && -n $port ]] ; then
    # a port existing implies that we must port forward from a central server
    # this connection is from a computer that may be out in the wilderness, so we must tunnel through cello
    if [[ ! -n $message ]] ; then
        message=$auto_msg
    fi

    # grab info on the central server  ... this assumes that only one exists
    center_name=$(egrep "\*\|" $SERV | awk -F'|' '{print $1}')
    center_ip=$(  egrep "\*\|" $SERV | awk -F'|' '{print $2}')
    center_user=$(egrep "\*\|" $SERV | awk -F'|' '{print $3}')
    center_port=$(egrep "\*\|" $SERV | awk -F'|' '{print $4}')

    # first, open tunnel
    echo "establishing connection to $center_ip"
    tssh-tunnel $port $ip $center_ip $center_user

    # now establish connection to final destination
    echo "tunnel -> $name ..."
    $cmd -p $port ${user}@localhost -t $message
    # this walks through the tunnel while suppressing the "auth host" questions
    # without this, a connection to [port]:localhost is not possible inside a shell script
    # this -t '...' part opens the default tmux session
    # when the connection is detached or cut, the ssh connection is removed
fi


