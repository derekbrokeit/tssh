#!/bin/bash
# Copyright 2012 Derek Ashley Thomas

if [[ "x$LOGS_DIR" == "x" ]] ; then
    ! echo "Usage: $(basename $)"
    ! echo "The environment  variable \$LOGS_DIR was not detected, please set it and proceed" 
    exit
fi


# setup safe exit
trap 'killListener' EXIT
tmp=$(mktemp -t $(basename $0).XXX)
killListener() {
    if [[ $count -gt 0 ]] ; then
        echo
        echo
        echo "$(basename $0):$count servers added"
        rm $tmp   > /dev/null
    fi
}

# function to retrieve a new server from the user
get_new_server(){
    while [[ true ]] ; do
        # test for name
        # make sure no repeat
        read -p "$(($count + 1)).   Name: " name
        awk -F'|' '{print $1}' $SERV | sed 's/\*$//g' > $tmp
        test=$( grep "^${name}$" $tmp)
        if [[ "x$test" == "x" ]] ; then
            break
        else
            echo "*** A server with the name '$name' already exists"
        fi
    done

    while [[ true ]] ; do
        # test for address
        # make sure no repeat
        read -p "  address: " addr
        awk -F'|' '{print $2}' $SERV  > $tmp
        test=$( grep "^${name}$" $tmp)
        if [[ "x$test" == "x" ]] ; then
            break
        else
            echo "*** A server with the address '$addr' already exists"
        fi
    done

    # now get username and port, which can be anything
    # repetition is ok
    read -p "     user: " user
    read -p "     port: " port
    read -p "     msg : " msg

    # stamp the server file with this server
    echo "$name|$addr|$user|$port|$msg" >> $SERV

    # change the count
    count=$count+1

}

# prints out the server file in a readable format
print_server_file() {

    echo "  ---- serverconn ----"
    echo "name|address|user|port|message" | awk -F'|' '{ printf "%-20s  |  %-16.16s  |  %-15s  |  %-4s | %s\n",$1,$2,$3,$4,$5 }' 
    echo "********************************************************************************"
    awk -F'|' '{ printf "%-20s  |  %-16.16s  |  %-15s  |  %-4s | %s\n",$1,$2,$3,$4,$5 }' $SERV
    echo "  ---- serverconn ----"
}

SERV=$LOGS_DIR/serverconn
echo "$(basename $0): setup for server list"
if [[ ! -f $SERV ]] ; then
    touch $SERV
    echo "  - New serverconn file"
    echo "  - append a star at the end of servernames"
    echo "    for the central, port-forwarding server"
    echo "  - Port is optional, but is used for port forwarding"
    echo ""

else
    print_server_file
    if [[ $1 == "-p" ]] ; then
        exit
    fi
fi

count=$(cat $SERV | wc -l)
while [[ true ]] ; do
    echo "  - adding new servers"
    get_new_server
done





